// <auto-generated />
using System;
using Graveyard.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Graveyard_Backend.Migrations
{
    [DbContext(typeof(contextModel))]
    partial class contextModelModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Graveyard.Models.Burried", b =>
                {
                    b.Property<int>("id_z")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_z"));

                    b.Property<DateTime>("date_of_birth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("date_of_death")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_z");

                    b.ToTable("burried");
                });

            modelBuilder.Entity("Graveyard.Models.Customer", b =>
                {
                    b.Property<int>("Id_c")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_c"));

                    b.Property<DateTime>("Date_of_creation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id_c");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("Graveyard.Models.Grave", b =>
                {
                    b.Property<int>("id_g")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_g"));

                    b.Property<int>("burriedid_z")
                        .HasColumnType("integer");

                    b.Property<int>("customerId_c")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("validUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("x")
                        .HasColumnType("integer");

                    b.Property<int>("y")
                        .HasColumnType("integer");

                    b.HasKey("id_g");

                    b.HasIndex("burriedid_z");

                    b.HasIndex("customerId_c");

                    b.ToTable("grave");
                });

            modelBuilder.Entity("Graveyard.Models.OwnedGrave", b =>
                {
                    b.Property<int>("customerId_c")
                        .HasColumnType("integer");

                    b.Property<int>("graveid_g")
                        .HasColumnType("integer");

                    b.HasIndex("customerId_c");

                    b.HasIndex("graveid_g");

                    b.ToTable("ownedGraves");
                });

            modelBuilder.Entity("Graveyard.Models.Owned_Role", b =>
                {
                    b.Property<int>("CustomerId_c")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CustomerId_c");

                    b.ToTable("owned_Roles");
                });

            modelBuilder.Entity("Graveyard.Models.Shop", b =>
                {
                    b.Property<int>("id_i")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_i"));

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("id_i");

                    b.ToTable("shop");
                });

            modelBuilder.Entity("Graveyard.Models.ShoppingHistory", b =>
                {
                    b.Property<int>("Shopid_i")
                        .HasColumnType("integer");

                    b.Property<int>("customerId_c")
                        .HasColumnType("integer");

                    b.Property<DateTime>("date_of_sell")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasIndex("Shopid_i");

                    b.HasIndex("customerId_c");

                    b.ToTable("shopHistory");
                });

            modelBuilder.Entity("Graveyard.Models.ShoppingList", b =>
                {
                    b.Property<int>("customerId_c")
                        .HasColumnType("integer");

                    b.Property<DateTime>("date_of_sell")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<int>("shopid_i")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("customerId_c");

                    b.HasIndex("shopid_i");

                    b.ToTable("shopList");
                });

            modelBuilder.Entity("Graveyard.Models.ToBeBurried", b =>
                {
                    b.Property<int>("id_b")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_b"));

                    b.Property<DateTime>("burial_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("burriedid_z")
                        .HasColumnType("integer");

                    b.HasKey("id_b");

                    b.HasIndex("burriedid_z");

                    b.ToTable("burials");
                });

            modelBuilder.Entity("Graveyard.Models.Grave", b =>
                {
                    b.HasOne("Graveyard.Models.Burried", "burried")
                        .WithMany()
                        .HasForeignKey("burriedid_z")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graveyard.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId_c")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("burried");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Graveyard.Models.OwnedGrave", b =>
                {
                    b.HasOne("Graveyard.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId_c")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graveyard.Models.Grave", "grave")
                        .WithMany()
                        .HasForeignKey("graveid_g")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("grave");
                });

            modelBuilder.Entity("Graveyard.Models.Owned_Role", b =>
                {
                    b.HasOne("Graveyard.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId_c")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Graveyard.Models.ShoppingHistory", b =>
                {
                    b.HasOne("Graveyard.Models.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("Shopid_i")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graveyard.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId_c")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Graveyard.Models.ShoppingList", b =>
                {
                    b.HasOne("Graveyard.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId_c")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graveyard.Models.Shop", "shop")
                        .WithMany()
                        .HasForeignKey("shopid_i")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("shop");
                });

            modelBuilder.Entity("Graveyard.Models.ToBeBurried", b =>
                {
                    b.HasOne("Graveyard.Models.Burried", "burried")
                        .WithMany()
                        .HasForeignKey("burriedid_z")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("burried");
                });
#pragma warning restore 612, 618
        }
    }
}
