// <auto-generated />
using System;
using Graveyard_Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Graveyard_Backend.Migrations
{
    [DbContext(typeof(ContextModel))]
    partial class contextModelModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Graveyard_Backend.Models.Burried", b =>
                {
                    b.Property<int>("BurriedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BurriedId"));

                    b.Property<DateOnly>("date_of_birth")
                        .HasColumnType("date");

                    b.Property<DateOnly>("date_of_death")
                        .HasColumnType("date");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BurriedId");

                    b.ToTable("burried");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("GraveId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("PurchaseHistoryShopHistoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GraveId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchaseHistoryShopHistoryId");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime>("Date_of_creation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Owned_role")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.HasIndex("Email", "Password");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.Grave", b =>
                {
                    b.Property<int>("GraveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GraveId"));

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("validUntil")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("x")
                        .HasColumnType("integer");

                    b.Property<int>("y")
                        .HasColumnType("integer");

                    b.HasKey("GraveId");

                    b.ToTable("grave");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.GraveBurried", b =>
                {
                    b.Property<int>("BurriedGraveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BurriedGraveId"));

                    b.Property<int>("BurriedId")
                        .HasColumnType("integer");

                    b.Property<int>("GraveId")
                        .HasColumnType("integer");

                    b.Property<int>("GravediggerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("burialDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("BurriedGraveId");

                    b.HasIndex("BurriedId");

                    b.HasIndex("GraveId");

                    b.HasIndex("GravediggerId");

                    b.ToTable("graveBurried");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.Gravedigger", b =>
                {
                    b.Property<int>("GravediggerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GravediggerId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GravediggerId");

                    b.ToTable("Gravediggers");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("ItemId");

                    b.ToTable("item");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.PurchaseHistory", b =>
                {
                    b.Property<int>("ShopHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShopHistoryId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("date_of_purchase")
                        .HasColumnType("date");

                    b.HasKey("ShopHistoryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("purchaseHistory");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.Cart", b =>
                {
                    b.HasOne("Graveyard_Backend.Models.Customer", "Customer")
                        .WithMany("carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graveyard_Backend.Models.Grave", "Grave")
                        .WithMany("Carts")
                        .HasForeignKey("GraveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graveyard_Backend.Models.Item", "Items")
                        .WithMany("Carts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graveyard_Backend.Models.PurchaseHistory", null)
                        .WithMany("cart")
                        .HasForeignKey("PurchaseHistoryShopHistoryId");

                    b.Navigation("Customer");

                    b.Navigation("Grave");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.GraveBurried", b =>
                {
                    b.HasOne("Graveyard_Backend.Models.Burried", "burried")
                        .WithMany("BurriedGraves")
                        .HasForeignKey("BurriedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graveyard_Backend.Models.Grave", "grave")
                        .WithMany("BurriedGraves")
                        .HasForeignKey("GraveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graveyard_Backend.Models.Gravedigger", "Gravedigger")
                        .WithMany()
                        .HasForeignKey("GravediggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gravedigger");

                    b.Navigation("burried");

                    b.Navigation("grave");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.PurchaseHistory", b =>
                {
                    b.HasOne("Graveyard_Backend.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.Burried", b =>
                {
                    b.Navigation("BurriedGraves");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.Customer", b =>
                {
                    b.Navigation("carts");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.Grave", b =>
                {
                    b.Navigation("BurriedGraves");

                    b.Navigation("Carts");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.Item", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("Graveyard_Backend.Models.PurchaseHistory", b =>
                {
                    b.Navigation("cart");
                });
#pragma warning restore 612, 618
        }
    }
}
