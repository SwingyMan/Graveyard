// <auto-generated />
using System;
using Graveyard.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Graveyard_Backend.Migrations
{
    [DbContext(typeof(contextModel))]
    [Migration("20230418135853_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Graveyard.Models.Burried", b =>
                {
                    b.Property<int>("BurriedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BurriedID"));

                    b.Property<DateTime>("date_of_birth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("date_of_death")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BurriedID");

                    b.ToTable("burried");
                });

            modelBuilder.Entity("Graveyard.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartId"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerID");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("Graveyard.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerID"));

                    b.Property<DateTime>("Date_of_creation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owned_role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerID");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("Graveyard.Models.Grave", b =>
                {
                    b.Property<int>("GraveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GraveID"));

                    b.Property<int>("BurriedID")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("validUntil")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("x")
                        .HasColumnType("integer");

                    b.Property<int>("y")
                        .HasColumnType("integer");

                    b.HasKey("GraveID");

                    b.HasIndex("BurriedID");

                    b.ToTable("grave");
                });

            modelBuilder.Entity("Graveyard.Models.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemID"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<int>("shopHistoryID")
                        .HasColumnType("integer");

                    b.HasKey("ItemID");

                    b.HasIndex("CartId");

                    b.HasIndex("shopHistoryID");

                    b.ToTable("shop");
                });

            modelBuilder.Entity("Graveyard.Models.ToBeBurried", b =>
                {
                    b.Property<int>("ToBeBurriedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ToBeBurriedID"));

                    b.Property<int>("BurriedID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("burial_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ToBeBurriedID");

                    b.HasIndex("BurriedID");

                    b.ToTable("burials");
                });

            modelBuilder.Entity("Graveyard.Models.shopHistory", b =>
                {
                    b.Property<int>("shopHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("shopHistoryID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("date_of_buyment")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("shopHistoryID");

                    b.HasIndex("CustomerID");

                    b.ToTable("shopHistory");
                });

            modelBuilder.Entity("Graveyard.Models.Cart", b =>
                {
                    b.HasOne("Graveyard.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Graveyard.Models.Grave", b =>
                {
                    b.HasOne("Graveyard.Models.Burried", "burried")
                        .WithMany()
                        .HasForeignKey("BurriedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("burried");
                });

            modelBuilder.Entity("Graveyard.Models.Item", b =>
                {
                    b.HasOne("Graveyard.Models.Cart", "cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graveyard.Models.shopHistory", "shopHistory")
                        .WithMany("Items")
                        .HasForeignKey("shopHistoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cart");

                    b.Navigation("shopHistory");
                });

            modelBuilder.Entity("Graveyard.Models.ToBeBurried", b =>
                {
                    b.HasOne("Graveyard.Models.Burried", "burried")
                        .WithMany()
                        .HasForeignKey("BurriedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("burried");
                });

            modelBuilder.Entity("Graveyard.Models.shopHistory", b =>
                {
                    b.HasOne("Graveyard.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Graveyard.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Graveyard.Models.shopHistory", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
